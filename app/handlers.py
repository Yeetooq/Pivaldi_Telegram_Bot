import asyncio
import datetime
import json
import numpy as np
import random
import requests
import aiocache
from aiogram import types, Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import PreCheckoutQuery, LabeledPrice, InputMediaPhoto, ReplyKeyboardRemove
from geopy.geocoders import Nominatim

from app.crypto.function_crypto import ton, nott, btc, eth, sol, ada
from app.function.check_sub_channels import check_sub_channels
from app.function.anekdot import send_anekdot
from app.crypto.all_check import get_all_crypto_data
from app.crypto.price import get_all_crypto_price
from app.database.requests import (get_category_menu, get_lyudi, update_user_stats, get_user_win, get_user_lose,
                                   calculate_win_percentage)
import app.keyboards as kb
import app.prices as pr
from app.states import Number, Registration
import config
import app.database.requests as rq
from config import API

router = Router()

bot = Bot(token=config.TOKEN)

user_data = {}


@router.message(CommandStart())
async def start(message: types.Message):
    await rq.set_user(message.from_user.id, message.from_user.username)
    await message.answer('–ü—Ä–∏–≤–µ—Ç üëã\n–•–æ—á–µ—à—å –≤–∫—É—Å–Ω–æ –ø–æ–µ—Å—Ç—å –≤ Pivaldi? üòã\n–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞!',
                         reply_markup=kb.bronirovanie)


@router.message(Command('help'))
async def help(message: types.Message):
    await message.answer('–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞ @y7t7q7')


@router.message(Command('help_pro'))
async def help_pro(message: types.Message):
    await message.answer('–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:\n\n–†–µ—Å—Ç–æ—Ä–∞–Ω ¬´PIVALDI¬ª –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥\n–¢–µ–ª.: +7(495)477-55-00 '
                         'üìû\n\n–†–µ—Å—Ç–æ—Ä–∞–Ω ¬´PIVALDI¬ª –û–¥–∏–Ω—Ü–æ–≤–æ\n–¢–µ–ª.: +7(495)477-95-00 üìû\n\n–†–µ—Å—Ç–æ—Ä–∞–Ω ¬´PIVALDI¬ª '
                         '–Æ—Ä–ª–æ–≤–æ\n–¢–µ–ª.: +7(495)477-47-00 üìû')


@router.message(Command('website'))
async def website(message: types.Message):
    await message.answer('–ù–∞—à —Å–∞–π—Ç: <b><a href="https://pivaldi.ru">Pivaldi.ru</a></b>', parse_mode="html")


@router.message(Command('anekdot'))
async def send_random_anekdot(message: types.Message):
    if await check_sub_channels(bot, channels=config.CHANNELS, user_id=message.from_user.id):
        await send_anekdot(message)
    else:
        await message.answer(config.NOT_SUB_MESSAGE, reply_markup=kb.showChannels())


@router.message(Command('pay'))
async def order(message: types.Message, bot: Bot):
    total_amount = sum(price.amount for price in pr.total)

    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —á–∞–µ–≤—ã–µ –∫–∞–∫ 20% –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
    max_tip_amount = int(total_amount * 0.20)
    tip_amount = int(total_amount)

    await bot.send_invoice(
        chat_id=message.chat.id,
        title='–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
        description='–ë—É–¥—å—Ç–µ –ª—é–±–µ–∑–Ω—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É Pivaldi üòâ',
        payload='info for me',
        provider_token='your provider token',
        currency='rub',
        prices=[
            LabeledPrice(
                label='–ß–µ—Ä—Ä–∏ –±—É—Ä–≥–µ—Ä',
                amount=200 * 100
            ),
            LabeledPrice(
                label='–õ–∞—Ç—Ç–µ',
                amount=0
            ),
            LabeledPrice(
                label='–ö–æ–∫–æ—Å–æ–≤—ã–π —Å–∏—Ä–æ–ø',
                amount=30 * 100
            ),
            LabeledPrice(
                label='–¢–∞—Ä—Ö—É–Ω 300–º–ª',
                amount=300 * 100
            ),
            LabeledPrice(
                label='–ê–∑–∏–∞—Ç—Å–∫–∏–π —Å–∞–ª–∞—Ç —Å —É–≥—Ä—ë–º',
                amount=200 * 100
            ),
            LabeledPrice(
                label='–°–∫–∏–¥–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞',
                amount=-200 * 100
            )
        ],
        max_tip_amount=max_tip_amount,
        suggested_tip_amounts=[int(tip_amount * 0.05), int(tip_amount * 0.1), int(tip_amount * 0.15),
                               int(tip_amount * 0.2)],
        photo_url='https://pivaldi.ru/wp-content/uploads/2022/04/pivo-glavnaya1.jpg',
        photo_size=100,
        photo_width=800,
        photo_height=450,
        need_name=True,
        need_phone_number=True,
        allow_sending_without_reply=True,
        request_timeout=15
    )


@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.message(F.successful_payment)
async def successful_payment(message: types.Message, bot: Bot):
    chat_id = 'your chat_id without'' '
    total_label = [name.label for name in pr.total]
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    msg = (f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency}'
           f'\n–û–∂–∏–¥–∞–π—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ ‚è≥')
    msg_full = message.successful_payment.order_info
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    await message.answer(msg)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id
    await bot.send_message(chat_id,
                           f'–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ {msg_full.name} —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑.\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {msg_full.phone_number}'
                           f'\n–ù–∏–∫ –≤ tg: @{message.from_user.username}\n\n–ó–∞–∫–∞–∑:\n{", ".join(total_label[:-1])}')


@router.message(Command('weather'))
async def weather(message: types.Message):
    await message.answer('–£–∑–Ω–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –ø–µ—Ä–µ–¥ –ø–æ—Ö–æ–¥–æ–º –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω, —á—Ç–æ–±—ã –Ω–∏—á—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–ª–æ –≤–∞—à–∏–º –ø–ª–∞–Ω–∞–º üå§Ô∏è',
                         reply_markup=kb.kb_weather)


@router.message(Command('secret'))
async def command_start_handler(message: types.Message):
    await message.answer(
        f"/price - The price of the crypto at the moment üí≤\n/check - Check the price change cryptocurrency in the last "
        f"hour üìä\n/nonstop_check - –°ryptocurrency change in 1 hour every 3 seconds ‚è≥")


@router.message(Command('check'))
async def command_check_handler(message: types.Message):
    results = await get_all_crypto_data()
    await message.answer(f"Price change in 1 hour üìä")
    for crypto_name, side, percentage in results:
        if crypto_name == 'the-open-network':
            crypto_name = 'TON'
        if crypto_name == 'notcoin':
            crypto_name = 'NOT'
        if crypto_name == 'bitcoin':
            crypto_name = 'BTC'
        if crypto_name == 'cardano':
            crypto_name = 'ADA'
        if crypto_name == 'solana':
            crypto_name = 'SOL'
        if crypto_name == 'ethereum':
            crypto_name = 'ETH'
        if side:
            await message.answer(f"{crypto_name}: üìà + {percentage}")
        else:
            await message.answer(f"{crypto_name}: üìâ - {percentage}")


@router.message(Command('price'))
async def command_price_handler(message: types.Message):
    results = await get_all_crypto_price()
    await message.answer(f"The current price of the crypto üí≤")
    crpt = {}
    for crypto_name, price in results:
        if crypto_name == 'the-open-network':
            crypto_name = 'TON'
        if crypto_name == 'notcoin':
            crypto_name = 'NOT'
        if crypto_name == 'bitcoin':
            crypto_name = 'BTC'
        if crypto_name == 'cardano':
            crypto_name = 'ADA'
        if crypto_name == 'solana':
            crypto_name = 'SOL'
        if crypto_name == 'ethereum':
            crypto_name = 'ETH'
        crpt[crypto_name] = price
    message_text = "\n\n".join([f"{crypto_name}: {price}" for crypto_name, price in crpt.items()])
    await message.answer(message_text)


@router.message(Command('nonstop_check'))
async def command_nonstop_handler(message: types.Message):
    await message.answer("Select a cryptocurrency to track (every 3 secondsüïí):", reply_markup=kb.kb_crypto)


@router.callback_query(lambda c: c.data in ['ton', 'not', 'btc', 'eth', 'sol', 'ada'])
async def process_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    global running
    running = True  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –≤ True
    while running:
        side = percentage = 'Unknown'
        if callback_query.data == 'ton':
            side, percentage = await ton()
        elif callback_query.data == 'not':
            side, percentage = await nott()
        elif callback_query.data == 'btc':
            side, percentage = await btc()
        elif callback_query.data == 'eth':
            side, percentage = await eth()
        elif callback_query.data == 'sol':
            side, percentage = await sol()
        elif callback_query.data == 'ada':
            side, percentage = await ada()

        if side:
            await bot.send_message(callback_query.from_user.id, f"üìà + {percentage}")
        else:
            await bot.send_message(callback_query.from_user.id, f"üìâ - {percentage}")

        await asyncio.sleep(3)


@router.callback_query(lambda c: c.data == 'stop')
async def command_stop_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    global running
    running = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –≤ False
    await bot.send_message(callback_query.from_user.id, f"Nonstop check has been stopped.")


@router.callback_query(F.data == "zelenograd")
async def zel(callback: types.CallbackQuery):
    res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q=–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥&appid={API}&units=metric&lang=ru')
    data = json.loads(res.text)
    description = data['weather'][0]['description']
    if data['main']['temp'] > 0.0:
        temp = '+' + str(round(data['main']['temp'])) + '¬∞C' + ', '
    else:
        temp = str(round(data['main']['temp'])) + '¬∞C'
    await callback.answer()
    res_vvv = requests.get(
        f'https://api.openweathermap.org/data/2.5/forecast?q=–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥&appid={API}&units=metric&lang=ru')
    data_vvv = json.loads(res_vvv.text)
    vvv = np.array([])
    for i in np.arange(4):
        vremya = data_vvv['list'][i]['dt']
        dt = datetime.datetime.fromtimestamp(vremya)
        formatted_time = dt.strftime('%Y-%m-%d | %H:%M')
        if data_vvv['list'][i]['main']['temp'] > 0.0:
            temp_vvv = '+' + str(round(data_vvv['list'][i]['main']['temp'])) + '¬∞C' + ', '
        else:
            temp_vvv = str(round(data_vvv['list'][i]['main']['temp'])) + '¬∞C'

        description_vvv = data_vvv["list"][i]["weather"][0]["description"]
        vvv = np.append(vvv, f'{formatted_time}:' + '\n' + temp_vvv + description_vvv)
    await callback.message.answer(
        '–°–µ–π—á–∞—Å –≤ –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥–µ:\n' + temp + description + '\n\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:\n\n'
        + vvv[0] + '\n\n' + vvv[1] + '\n\n' + vvv[2])


@router.callback_query(F.data == "yurlovo")
async def yurl(callback: types.CallbackQuery):
    res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q=–Æ—Ä–ª–æ–≤–æ&appid={API}&units=metric&lang=ru')
    data = json.loads(res.text)
    description = data['weather'][0]['description']
    if data['main']['temp'] > 0.0:
        temp = '+' + str(round(data['main']['temp'])) + '¬∞C' + ', '
    else:
        temp = str(round(data['main']['temp'])) + '¬∞C'

    await callback.answer()

    res_vvv = requests.get(
        f'https://api.openweathermap.org/data/2.5/forecast?q=–Æ—Ä–ª–æ–≤–æ&appid={API}&units=metric&lang=ru')
    data_vvv = json.loads(res_vvv.text)
    vvv = np.array([])
    for i in np.arange(4):
        vremya = data_vvv['list'][i]['dt']
        dt = datetime.datetime.fromtimestamp(vremya)
        formatted_time = dt.strftime('%Y-%m-%d | %H:%M')
        if data_vvv['list'][i]['main']['temp'] > 0.0:
            temp_vvv = '+' + str(round(data_vvv['list'][i]['main']['temp'])) + '¬∞C' + ', '
        else:
            temp_vvv = str(round(data_vvv['list'][i]['main']['temp'])) + '¬∞C'

        description_vvv = data_vvv["list"][i]["weather"][0]["description"]
        vvv = np.append(vvv, f'{formatted_time}:' + '\n' + temp_vvv + description_vvv)
    await callback.message.answer(
        '–°–µ–π—á–∞—Å –≤ –Æ—Ä–ª–æ–≤–æ:\n' + temp + description + '\n\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:\n\n' + vvv[0] + '\n\n'
        + vvv[1] + '\n\n' + vvv[2])


@router.callback_query(F.data == "odincovo")
async def odinc(callback: types.CallbackQuery):
    res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q=–û–¥–∏–Ω—Ü–æ–≤–æ&appid={API}&units=metric&lang=ru')
    data = json.loads(res.text)
    description = data['weather'][0]['description']
    if data['main']['temp'] > 0.0:
        temp = '+' + str(round(data['main']['temp'])) + '¬∞C' + ', '
    else:
        temp = str(round(data['main']['temp'])) + '¬∞C'
    await callback.answer()
    res_vvv = requests.get(
        f'https://api.openweathermap.org/data/2.5/forecast?q=–û–¥–∏–Ω—Ü–æ–≤–æ&appid={API}&units=metric&lang=ru')
    data_vvv = json.loads(res_vvv.text)
    vvv = np.array([])
    for i in np.arange(4):
        vremya = data_vvv['list'][i]['dt']
        dt = datetime.datetime.fromtimestamp(vremya)
        formatted_time = dt.strftime('%Y-%m-%d | %H:%M')
        if data_vvv['list'][i]['main']['temp'] > 0.0:
            temp_vvv = '+' + str(round(data_vvv['list'][i]['main']['temp'])) + '¬∞C' + ', '
        else:
            temp_vvv = str(round(data_vvv['list'][i]['main']['temp'])) + '¬∞C'

        description_vvv = data_vvv["list"][i]["weather"][0]["description"]
        vvv = np.append(vvv, f'{formatted_time}:' + '\n' + temp_vvv + description_vvv)
    await callback.message.answer(
        '–°–µ–π—á–∞—Å –≤ –û–¥–∏–Ω—Ü–æ–≤–æ:\n' + temp + description + '\n\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:\n\n' + vvv[0] + '\n\n' + vvv[1]
        + '\n\n' + vvv[2])


@router.callback_query(F.data == "mitishi")
async def mitish(callback: types.CallbackQuery):
    res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q=–ú—ã—Ç–∏—â–∏&appid={API}&units=metric&lang=ru')
    data = json.loads(res.text)
    description = data['weather'][0]['description']
    if data['main']['temp'] > 0.0:
        temp = '+' + str(round(data['main']['temp'])) + '¬∞C' + ', '
    else:
        temp = str(round(data['main']['temp'])) + '¬∞C'
    await callback.answer()
    res_vvv = requests.get(
        f'https://api.openweathermap.org/data/2.5/forecast?q=–ú—ã—Ç–∏—â–∏&appid={API}&units=metric&lang=ru')
    data_vvv = json.loads(res_vvv.text)
    vvv = np.array([])
    for i in np.arange(4):
        vremya = data_vvv['list'][i]['dt']
        dt = datetime.datetime.fromtimestamp(vremya)
        formatted_time = dt.strftime('%Y-%m-%d | %H:%M')
        if data_vvv['list'][i]['main']['temp'] > 0.0:
            temp_vvv = '+' + str(round(data_vvv['list'][i]['main']['temp'])) + '¬∞C' + ', '
        else:
            temp_vvv = str(round(data_vvv['list'][i]['main']['temp'])) + '¬∞C'

        description_vvv = data_vvv["list"][i]["weather"][0]["description"]
        vvv = np.append(vvv, f'{formatted_time}:' + '\n' + temp_vvv + description_vvv)
    await callback.message.answer(
        '–°–µ–π—á–∞—Å –≤ –ú—ã—Ç–∏—â–∞—Ö:\n' + temp + description + '\n\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:\n\n' + vvv[0] + '\n\n' + vvv[1]
        + '\n\n' + vvv[2])


@router.message(Command('catalog'))
async def catalog(message: types.Message):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ user_data
    user_id = message.from_user.id
    user_data[user_id] = aiocache.SimpleMemoryCache()

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é üõí', reply_markup=await kb.categories_menu())


@router.callback_query(F.data.startswith('category_'))
async def category(callback: types.CallbackQuery):
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    category_id = callback.data.split('_')[1]
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è data, –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if user_id not in user_data:
        user_data[user_id] = aiocache.SimpleMemoryCache()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º category_id –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π data –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await user_data[user_id].set('category_id', category_id)
    await callback.answer('')
    if category_id != '13':
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üçΩÔ∏è',
                                      reply_markup=await kb.menu(callback.data.split('_')[1]))
    else:
        photki = await get_category_menu(callback.data.split('_')[1])
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        media_group = [InputMediaPhoto(media=photo.photo_url) for photo in photki]

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        await bot.send_media_group(
            chat_id=callback.message.chat.id,
            media=media_group
        )

        # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        await callback.message.answer('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Üì', reply_markup=await kb.nazad_bar())


@router.callback_query(F.data.startswith('menu_'))
async def menu(callback: types.CallbackQuery):
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    menu_data = await rq.get_menu(callback.data.split('_')[1])
    await callback.answer('')
    if len(menu_data.description) > 1:
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=menu_data.photo_url,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {menu_data.bludo}\n–û–ø–∏—Å–∞–Ω–∏–µ: {menu_data.description}\n–¶–µ–Ω–∞: {menu_data.price} —Ä—É–±.',
            reply_markup=await kb.nazad()
        )
    else:
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=menu_data.photo_url,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {menu_data.bludo}\n–¶–µ–Ω–∞: {menu_data.price} —Ä—É–±.',
            reply_markup=await kb.nazad()
        )


@router.callback_query(lambda c: c.data == 'to_nazad' or c.data == 'to_main' or c.data == 'close_menu')
async def nazad(callback: types.CallbackQuery):
    if callback.data == 'to_nazad':
        # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è data
        if user_id in user_data:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ category_id –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π data –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            category_id = await user_data[user_id].get('category_id')
            if category_id:
                await bot.delete_message(callback.message.chat.id, callback.message.message_id)
                await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üçΩÔ∏è',
                                              reply_markup=await kb.menu(category_id))
    elif callback.data == 'to_main':
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await catalog(callback.message)
    elif callback.data == 'close_menu':
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)


@router.callback_query(F.data == "subchanneldone")
async def subchanneldone(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    if await check_sub_channels(bot, channels=config.CHANNELS, user_id=callback_query.from_user.id):
        await send_anekdot(callback_query.message)
    else:
        await callback_query.message.answer(config.NOT_SUB_MESSAGE_POVTORNO, reply_markup=kb.showChannels())


@router.message(Command('statistics'))
async def send_welcome(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –æ–∂–∏–¥–∞–Ω–∏—è
    wins = await get_user_win(tg_id=message.from_user.id)
    loses = await get_user_lose(tg_id=message.from_user.id)
    win_rate = await calculate_win_percentage(tg_id=message.from_user.id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n\n"
                         f"üèÜ–ü–æ–±–µ–¥—ã: {wins}\n"
                         f"‚ùå–ü–æ—Ä–∞–∂–µ–Ω–∏—è: {loses}\n"
                         f"üìàWin Rate: {win_rate}%")


@router.message(Command('registration'))
async def reg_1(message: types.Message, state: FSMContext):
    await state.set_state(Registration.name)
    await message.answer("–ù—É —á—Ç–æ, –¥–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è üëã")
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üë§")


@router.message(Registration.name)
async def reg_2(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.number)
    await message.answer('–û—Å—Ç–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû', reply_markup=kb.get_number)


@router.message(Registration.number)
async def reg_3(message: types.Message, state: FSMContext):
    await state.update_data(number=message.contact.phone_number)
    await state.set_state(Registration.location)
    await message.answer('–û—Å—Ç–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üö©\n***–Ω–µ –ø–∞—Ä—å—Å—è, —è –Ω–µ –§–°–ë***', reply_markup=kb.get_location)


@router.message(Registration.location)
async def reg_final(message: types.Message, state: FSMContext):
    geolocator = Nominatim(user_agent=str(message.from_user.id))
    latitude = message.location.latitude
    longitude = message.location.longitude
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–¥—Ä–µ—Å
    location = geolocator.reverse((latitude, longitude))
    address = location.address
    await state.update_data(location=address)
    data = await state.get_data()
    await rq.set_reg(message.from_user.id, data["name"], data["number"], data["location"])
    await message.answer('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ', reply_markup=ReplyKeyboardRemove())
    await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["number"]}'
                         f'\n–í–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è: {data["location"]}', reply_markup=kb.delete_reg)
    await state.clear()


@router.callback_query(F.data == "delete_reg")
async def nah_reg(callback: types.CallbackQuery):
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await rq.delete_info(callback.from_user.id)
    await callback.answer()
    await callback.message.answer('–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ ‚úÖ')


@router.message(lambda message: message.chat.id == 633542711 and message.text.startswith("–ù–æ–≤–æ—Å—Ç—å: "))
async def forward_news_to_others(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
    result = await get_lyudi()  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users = result.fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    news_text = message.text[len("–ù–æ–≤–æ—Å—Ç—å: "):].strip()  # –£–¥–∞–ª—è–µ–º —Ñ—Ä–∞–∑—É "–ù–æ–≤–æ—Å—Ç—å," –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    for user in users:
        chat_id = user  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç –∏–ª–∏ –∏–Ω–¥–µ–∫—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π chat_id
        if chat_id != message.chat.id:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫
            await bot.send_message(chat_id, f"–ù–æ–≤–æ—Å—Ç—å –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {news_text}")


@router.message(Command('game'))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.set_state(Number.number)
    await message.answer("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 üé≤\n–ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")


@router.message(Number.number)
async def guess_number(message: types.Message, state: FSMContext):
    await state.update_data(number=int(message.text))
    secret_number = random.randint(1, 10)
    user_number = int(message.text)

    if user_number == secret_number:
        await update_user_stats(tg_id=message.from_user.id, win=True)
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ!\n–ó–∞–Ω–æ–≤–æ: /game")
    elif user_number < secret_number:
        await update_user_stats(tg_id=message.from_user.id, win=False)
        await message.answer("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ –±–æ–ª—å—à–µ(\n–ó–∞–Ω–æ–≤–æ: /game")
    else:
        await update_user_stats(tg_id=message.from_user.id, win=False)
        await message.answer("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ –º–µ–Ω—å—à–µ(\n–ó–∞–Ω–æ–≤–æ: /game")

    await state.clear()
